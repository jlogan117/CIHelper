pipeline {
    agent { 
		label 'DEVODW801'
	}
	
stages {
    
	stage('Building Onboarding') {
		steps {
		    timeout(120){
			script {
				try {
				slackSend channel: "#onbcore", color: '#FFFF00', message: "STARTING: ${env.JOB_NAME} On ${env.NODE_NAME} \n build number: ${env.BUILD_NUMBER}"
				bat"C:\\CIHelper.exe -createstatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} 11"
				bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"BuildingOnb\" 1"
				bat"C:\\CIHelper.exe -removebuilds ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER}"
					bat"C:\\CIHelper.exe -rcloud Build ONBCITest onb"
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
                    bat"C:\\CIHelper.exe -updatestatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ${currentBuild.result}"
					def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    slackSend channel: "#onbcore", color: '#FF0000', message: "FAILED To Build Onboarding RC Branch \n Results: ${env.JOB_NAME} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
					throw error
                }
                finally{
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} BuildingOnb 2400"
				}
			}
		    }
		}
	}

	stage('Deleting Existing RCloud') {
		steps {
		    timeout(3){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"DeleteRcloud\" 2"
					bat"C:\\CIHelper.exe -rcloud delete ONBCITest onb"
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
                    bat"C:\\CIHelper.exe -updatestatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ${currentBuild.result}"
					def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    slackSend channel: "#onbcore", color: '#FF0000', message: "FAILED To Delete Onb rcloud \n Results: ${env.JOB_NAME} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
					throw error
                }
                finally{
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} DeleteRcloud 110"
				}
			}
		    }
		}
	}
	
	stage('Create Onb RCloud') {
		steps {
		    timeout(60){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"CreateOnbRCloud\" 3"
					bat"C:\\CIHelper.exe -rcloud create ONBCITest onb"
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
                    bat"C:\\CIHelper.exe -updatestatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ${currentBuild.result}"
					def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    slackSend channel: "#onbcore", color: '#FF0000', message: "FAILED To Create onb rcloud \n Results: ${env.JOB_NAME} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
					throw error
                }
                finally{
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} CreateOnbRCloud 1200"
				}
			}
		    }
		}
	}
	
	stage('SVN Update') {
		steps {
		    timeout(5){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"SVNUpdate\" 4"
					bat"C:\\SvnUpdateEcho.bat"
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
                    bat"C:\\CIHelper.exe -updatestatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ${currentBuild.result}"
					def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    slackSend channel: "#onbcore", color: '#FF0000', message: "FAILED To update svn \n Results: ${env.JOB_NAME} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
					throw error
                }
                finally{
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} SVNUpdate 140"
				}
			}
		    }
		}
	}
	
	stage('Configure Echo') {
		steps {
		    timeout(10){
			script {
				try {
				    bat "C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"ConfigureEcho\" 5"
					bat "C:\\CIHelper.exe -ChangeEnvironment \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\Echo.nunit.Automation.OnDemand.Onboarding.Core\\App.config\" HIT-CLOUDCLOUD"
					bat "C:\\CIHelper.exe -rotatebrowser \"${env.JOB_NAME}\" true ${env.BUILD_NUMBER}"  
					bat "C:\\CIHelper.exe -changeenvironmentxml \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\Echo.Environments.xml\" OnbCITest 138 OnbCITest"
					bat "C:\\projects\\UltiPro.NET\\AutomatedTests\\Echo\\Echo.nunit.TestSupport\\HITSetup\\BuildEcho.bat"
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
                    bat"C:\\CIHelper.exe -updatestatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ${currentBuild.result}"
                    def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    slackSend channel: "#onbcore", color: '#FF0000', message: "FAILED To Configure Echo \n Results: ${env.JOB_NAME} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
					throw error
                }
				finally{
					bat" if not exist \"C:\\${env.JOB_NAME}\" md \"C:\\${env.JOB_NAME}\" "
				    bat" md \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\" "
				    bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ConfigureEcho 180"
				}
			}
		    }
		}
	}
	
	stage('Create Onboarding Account SB122') {
		steps {
		    timeout(10){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"EnvSetup\" 6"
					bat"\"C:\\NUnit\\nunit-console\\nunit3-console.exe\" \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\Echo.Automation.OnDemand.Onboarding.Core.dll\" --where \"cat == EnvSetup\" > \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\EnvSetup.txt\" "
				}			
				catch(error){
                    currentBuild.result = 'FAILURE'
                    bat"C:\\CIHelper.exe -updatestatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ${currentBuild.result}"
                    def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    slackSend channel: "#onbcore", color: '#FF0000', message: "FAILED To Create onb account \n Results: ${env.JOB_NAME} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
					throw error
                }
				finally{
					//bat"copy \"C:\\projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\EchoErrors.html\" \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\EnvSetup.html\" /y "
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} EnvSetup"
				}
			}
		    }
		}
	}
        
	stage('Run AppConfigSettings Tests') {
		steps {
		    timeout(60){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"AppConfigSettings\" 7"
				    bat"\\\\denver2\\Groups\\OnDemand\\Public\\Onboarding\\PSTools\\PsExec.exe \\\\${env.NODE_NAME} -u DEVCORP\\svc.od.acct -p Ond3m@nd -h C:\\Cleanup.bat"
				    
					bat"\"C:\\NUnit\\nunit-console\\nunit3-console.exe\" \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\Echo.Automation.OnDemand.Onboarding.Core.dll\" --where \"cat == AppConfigSettings\" > \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\AppConfigSettings.txt\" "
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
					return
                }
				finally{
					//bat"copy \"C:\\projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\EchoErrors.html\" \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\AppConfigSettings.html\" /y "
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} AppConfigSettings"
				}
			}
		    }
		}
	}
        
	stage('Run FederalForms Tests') {
		steps {
		    timeout(450){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"FederalForms\" 8"
				    bat"\\\\denver2\\Groups\\OnDemand\\Public\\Onboarding\\PSTools\\PsExec.exe \\\\${env.NODE_NAME} -u DEVCORP\\svc.od.acct -p Ond3m@nd -h C:\\Cleanup.bat"
				    
					bat"\"C:\\NUnit\\nunit-console\\nunit3-console.exe\" \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\Echo.Automation.OnDemand.Onboarding.Core.dll\" --where \"cat == FederalForms\" > \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\FederalForms.txt\" "
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
					return
                }
				finally{
					//bat"copy \"C:\\projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\EchoErrors.html\" \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\FederalForms.html\" /y "
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} FederalForms"
				}
			}
		    }
		}
	}
		
	stage('Run PostHireVerifyStep Tests') {
		steps {
		    timeout(500){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"PostHireVerifyStep\" 9"
				    bat"\\\\denver2\\Groups\\OnDemand\\Public\\Onboarding\\PSTools\\PsExec.exe \\\\${env.NODE_NAME} -u DEVCORP\\svc.od.acct -p Ond3m@nd -h C:\\Cleanup.bat"
				    
					bat"\"C:\\NUnit\\nunit-console\\nunit3-console.exe\" \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\Echo.Automation.OnDemand.Onboarding.Core.dll\" --where \"cat == PostHireVerifyStep\" > \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\PostHireVerifyStep.txt\" "
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
					return
                }
				finally{
					//bat"copy \"C:\\projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\EchoErrors.html\" \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\PostHireVerifyStep.html\" /y "
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} PostHireVerifyStep"
				}
			}
		    }
		}
	}
		
	stage('Run NewEmployeeStep Tests') {
		steps {
		    timeout(450){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"NewEmployeeStep\" 10"
				    bat"\\\\denver2\\Groups\\OnDemand\\Public\\Onboarding\\PSTools\\PsExec.exe \\\\${env.NODE_NAME} -u DEVCORP\\svc.od.acct -p Ond3m@nd -h C:\\Cleanup.bat"
				    
					bat"\"C:\\NUnit\\nunit-console\\nunit3-console.exe\" \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\Echo.Automation.OnDemand.Onboarding.Core.dll\" --where \"cat == NewEmployeeStep\" > \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\NewEmployeeStep.txt\" "
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
					return
                }
				finally{
					//bat"copy \"C:\\projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\EchoErrors.html\" \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\NewEmployeeStep.html\" /y "
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} NewEmployeeStep"
				}
			}
		    }
		}
	}
		
	stage('Run StatePanelChecks Tests') {
		steps {
		    timeout(425){
			script {
				try {
				    bat"C:\\CIHelper.exe -updatestatusstage ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} \"StatePanelChecks\" 11"
				    bat"\\\\denver2\\Groups\\OnDemand\\Public\\Onboarding\\PSTools\\PsExec.exe \\\\${env.NODE_NAME} -u DEVCORP\\svc.od.acct -p Ond3m@nd -h C:\\Cleanup.bat"
				    
					bat"\"C:\\NUnit\\nunit-console\\nunit3-console.exe\" \"C:\\Projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\Echo.Automation.OnDemand.Onboarding.Core.dll\" --where \"cat == StatePanelChecks\" > \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\StatePanelChecks.txt\" "
				}					
				catch(error){
                    currentBuild.result = 'FAILURE'
					return
                }
				finally{
					//bat"copy \"C:\\projects\\UltiPro.NET\\AutomatedTests\\Echo\\EchoBin\\EchoErrors.html\" \"C:\\${env.JOB_NAME}\\${env.BUILD_NUMBER}\\StatePanelChecks.html\" /y "
					bat"C:\\CIHelper.exe -reportapi ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} StatePanelChecks"
				}
			}
		    }
		}
    }
    	stage('Slack Notification') {
		steps {
		    timeout(1){
			script {
				try {
				    if ("${currentBuild.result}" == "null") {
			            currentBuild.result = "SUCCESS"
                     }
				   bat"C:\\CIHelper.exe -updatestatus ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER} ${currentBuild.result}"
				   def params = "C:\\CIHelper.exe -getpassed ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER}"
				   def work = bat(returnStdout: true, script: "C:\\CIHelper.exe -getpassed ${env.NODE_NAME} \"${env.JOB_NAME}\" ${env.BUILD_NUMBER}").trim()
				   work = work.substring(115).trim()
				   notifyBuild("${currentBuild.result}", "${work}")
                }
                catch(error){
                    currentBuild.result = 'FAILURE'
					def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    slackSend channel: "#onbcore", color: '#FF0000', message: "FAILED To Report Results: ${env.JOB_NAME} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
					throw error
                }
			}
		    }
		}
    }
	
}
}
def notifyBuild(String buildStatus = 'SUCCESS', String work) {
	    if (buildStatus == "null" || buildStatus == "SUCCESS") {
            color = 'GREEN'
            colorCode = '#00FF00'
			buildStatus = "SUCCESS"
        } else {
            color = 'RED'
            colorCode = '#FF0000'
        }
        def urlnba = "file://${env.NODE_NAME}/c\$/${env.JOB_NAME}/${env.BUILD_NUMBER}"
	    slackSend channel: "#onbcore", color: colorCode, message: "${buildStatus}: ${env.JOB_NAME} \n ${work} \n build number: ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open Jenkins>) (<${urlnba}|Files>)"
	}