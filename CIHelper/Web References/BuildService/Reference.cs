//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CIHelper.BuildService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BuildServiceSoap", Namespace="http://tempuri.org/BuildService")]
    public partial class BuildService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpdateServerStatus2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSqlServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildRequestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BuildService() {
            this.Url = global::CIHelper.Properties.Settings.Default.CIHelper_BuildService_BuildService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdateServerStatus2CompletedEventHandler UpdateServerStatus2Completed;
        
        /// <remarks/>
        public event UpdateServerStatusCompletedEventHandler UpdateServerStatusCompleted;
        
        /// <remarks/>
        public event UpdateSqlServerStatusCompletedEventHandler UpdateSqlServerStatusCompleted;
        
        /// <remarks/>
        public event GetServerStatusCompletedEventHandler GetServerStatusCompleted;
        
        /// <remarks/>
        public event BuildRequestCompletedEventHandler BuildRequestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuildService/UpdateServerStatus2", RequestNamespace="http://tempuri.org/BuildService", ResponseNamespace="http://tempuri.org/BuildService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateServerStatus2(string servername, string uid, char status) {
            this.Invoke("UpdateServerStatus2", new object[] {
                        servername,
                        uid,
                        status});
        }
        
        /// <remarks/>
        public void UpdateServerStatus2Async(string servername, string uid, char status) {
            this.UpdateServerStatus2Async(servername, uid, status, null);
        }
        
        /// <remarks/>
        public void UpdateServerStatus2Async(string servername, string uid, char status, object userState) {
            if ((this.UpdateServerStatus2OperationCompleted == null)) {
                this.UpdateServerStatus2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerStatus2OperationCompleted);
            }
            this.InvokeAsync("UpdateServerStatus2", new object[] {
                        servername,
                        uid,
                        status}, this.UpdateServerStatus2OperationCompleted, userState);
        }
        
        private void OnUpdateServerStatus2OperationCompleted(object arg) {
            if ((this.UpdateServerStatus2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerStatus2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuildService/UpdateServerStatus", RequestNamespace="http://tempuri.org/BuildService", ResponseNamespace="http://tempuri.org/BuildService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateServerStatus(string servername, string uid) {
            this.Invoke("UpdateServerStatus", new object[] {
                        servername,
                        uid});
        }
        
        /// <remarks/>
        public void UpdateServerStatusAsync(string servername, string uid) {
            this.UpdateServerStatusAsync(servername, uid, null);
        }
        
        /// <remarks/>
        public void UpdateServerStatusAsync(string servername, string uid, object userState) {
            if ((this.UpdateServerStatusOperationCompleted == null)) {
                this.UpdateServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateServerStatus", new object[] {
                        servername,
                        uid}, this.UpdateServerStatusOperationCompleted, userState);
        }
        
        private void OnUpdateServerStatusOperationCompleted(object arg) {
            if ((this.UpdateServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuildService/UpdateSqlServerStatus", RequestNamespace="http://tempuri.org/BuildService", ResponseNamespace="http://tempuri.org/BuildService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSqlServerStatus(string servername, string uid, char status) {
            this.Invoke("UpdateSqlServerStatus", new object[] {
                        servername,
                        uid,
                        status});
        }
        
        /// <remarks/>
        public void UpdateSqlServerStatusAsync(string servername, string uid, char status) {
            this.UpdateSqlServerStatusAsync(servername, uid, status, null);
        }
        
        /// <remarks/>
        public void UpdateSqlServerStatusAsync(string servername, string uid, char status, object userState) {
            if ((this.UpdateSqlServerStatusOperationCompleted == null)) {
                this.UpdateSqlServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSqlServerStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateSqlServerStatus", new object[] {
                        servername,
                        uid,
                        status}, this.UpdateSqlServerStatusOperationCompleted, userState);
        }
        
        private void OnUpdateSqlServerStatusOperationCompleted(object arg) {
            if ((this.UpdateSqlServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSqlServerStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuildService/GetServerStatus", RequestNamespace="http://tempuri.org/BuildService", ResponseNamespace="http://tempuri.org/BuildService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerStatus(string servername, string uid) {
            object[] results = this.Invoke("GetServerStatus", new object[] {
                        servername,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerStatusAsync(string servername, string uid) {
            this.GetServerStatusAsync(servername, uid, null);
        }
        
        /// <remarks/>
        public void GetServerStatusAsync(string servername, string uid, object userState) {
            if ((this.GetServerStatusOperationCompleted == null)) {
                this.GetServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerStatusOperationCompleted);
            }
            this.InvokeAsync("GetServerStatus", new object[] {
                        servername,
                        uid}, this.GetServerStatusOperationCompleted, userState);
        }
        
        private void OnGetServerStatusOperationCompleted(object arg) {
            if ((this.GetServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerStatusCompleted(this, new GetServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuildService/BuildRequest", RequestNamespace="http://tempuri.org/BuildService", ResponseNamespace="http://tempuri.org/BuildService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BuildRequest(string username, string password, string envname, int buildno) {
            this.Invoke("BuildRequest", new object[] {
                        username,
                        password,
                        envname,
                        buildno});
        }
        
        /// <remarks/>
        public void BuildRequestAsync(string username, string password, string envname, int buildno) {
            this.BuildRequestAsync(username, password, envname, buildno, null);
        }
        
        /// <remarks/>
        public void BuildRequestAsync(string username, string password, string envname, int buildno, object userState) {
            if ((this.BuildRequestOperationCompleted == null)) {
                this.BuildRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildRequestOperationCompleted);
            }
            this.InvokeAsync("BuildRequest", new object[] {
                        username,
                        password,
                        envname,
                        buildno}, this.BuildRequestOperationCompleted, userState);
        }
        
        private void OnBuildRequestOperationCompleted(object arg) {
            if ((this.BuildRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdateServerStatus2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdateServerStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdateSqlServerStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetServerStatusCompletedEventHandler(object sender, GetServerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void BuildRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591